<?php

namespace EclipseGc\CommonConsole\Tests\Command;

use Consolidation\Config\Config;
use EclipseGc\CommonConsole\Command\PlatformCreate;
use EclipseGc\CommonConsole\CommonConsoleEvents;
use EclipseGc\CommonConsole\Event\GetPlatformTypeEvent;
use EclipseGc\CommonConsole\Event\GetPlatformTypesEvent;
use EclipseGc\CommonConsole\Platform\PlatformFactory;
use EclipseGc\CommonConsole\Platform\PlatformStorage;
use EclipseGc\CommonConsole\PlatformInterface;
use EclipseGc\CommonConsole\QuestionFactory;
use EclipseGc\CommonConsole\Tests\CommonConsoleTestBase;
use EclipseGc\CommonConsole\Tests\Platform\FooPlatform;
use Prophecy\Argument;
use Symfony\Component\Console\Tester\CommandTester;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;

class PlatformCreateTest extends CommonConsoleTestBase {

  public function testPlatformCreate() {
    $dispatcher = $this->prophesize(EventDispatcherInterface::class);

    $dispatcher->dispatch(CommonConsoleEvents::GET_PLATFORM_TYPES, Argument::type(GetPlatformTypesEvent::class))->will(function($arguments) {
      /** @var GetPlatformTypesEvent $event */
      $event = $arguments[1];
      $event->addPlatformType('foo_platform');
    });

    $dispatcher->dispatch(CommonConsoleEvents::GET_PLATFORM_TYPE, Argument::type(GetPlatformTypeEvent::class))->will(function($arguments) {
      /** @var GetPlatformTypeEvent $event */
      $event = $arguments[1];
      $event->addClass(FooPlatform::class);
    });

    $storage = $this->prophesize(PlatformStorage::class);
    $storage->save(Argument::type(PlatformInterface::class))->will(function ($arguments) {
      return $arguments[0];
    })
    ->shouldBeCalledOnce();

    $factory = $this->prophesize(PlatformFactory::class);
    $factory->getMockPlatformFromConfig(Argument::type(Config::class), Argument::type(PlatformStorage::class))->will(function($arguments) {
      /** @var Config $config */
      $config = $arguments[0];
      /** @var PlatformStorage $storage */
      $storage = $arguments[1];
      return new FooPlatform($config->export(), $storage);
    });

    $questionFactory = new QuestionFactory($this->getContainer());

    $command = new PlatformCreate($dispatcher->reveal(), $storage->reveal(), $factory->reveal(), $questionFactory);
    $command->setApplication($this->getContainer()->get('common_console_application'));
    $commandTester = new CommandTester($command);
    $commandTester->setInputs([
      'foo_platform',
      'Foo Test',
      'footest',
    ]);
    $rc = $commandTester->execute(['command' => $command->getName()]);

    $this->assertEquals($this->getCharOutput($this->getExpectedOrdOutput()), $commandTester->getDisplay());
    $this->assertEquals(0, $rc);
  }

  /**
   * Spits out a byte value array representation of a string using ord().
   *
   * Keeping this for potential future debugging purposes. Not used.
   *
   * @param string $output
   *
   * @return array
   */
  private function getOrdOutput(string $output): array {
    $return = [];
    for($i=0; $i<strlen($output); $i++) {
      $return[] = ord($output[$i]);
    }
    return $return;
  }

  /**
   * Converts an array of byte value into a string.
   *
   * @param array $chars
   *
   * @return string
   */
  private function getCharOutput(array $chars): string {
    $output = '';
    foreach ($chars as $char) {
      $output .= chr($char);
    }
    return $output;
  }

  /**
   * An array of byte values representing our command's output.
   *
   * @return int[]
   */
  private function getExpectedOrdOutput() {
    /* Roughly the value of:
     *"This command will step you through the process of creating a new platform on which to perform common console commands.
     *Platform Type:
     * [0] foo_platform
     * > foo_platform
     *Name: Alias: +----------------+--------------+
     *| Property       | Value        |
     *+----------------+--------------+
     *| platform.type  | foo_platform |
     *| platform.name  | Foo Test     |
     *| platform.alias | footest      |
     *+----------------+--------------+
     *Are these config correct? Successfully saved.
     *";
     *
     * For some reason, specific characters used in the output bear a different
     * bytevalue. Because of this I encoded the expected bytevalue output
     * instead of trying to store a string. It's ugly, sorry.
     */
    return array (
      0 => 84,
      1 => 104,
      2 => 105,
      3 => 115,
      4 => 32,
      5 => 99,
      6 => 111,
      7 => 109,
      8 => 109,
      9 => 97,
      10 => 110,
      11 => 100,
      12 => 32,
      13 => 119,
      14 => 105,
      15 => 108,
      16 => 108,
      17 => 32,
      18 => 115,
      19 => 116,
      20 => 101,
      21 => 112,
      22 => 32,
      23 => 121,
      24 => 111,
      25 => 117,
      26 => 32,
      27 => 116,
      28 => 104,
      29 => 114,
      30 => 111,
      31 => 117,
      32 => 103,
      33 => 104,
      34 => 32,
      35 => 116,
      36 => 104,
      37 => 101,
      38 => 32,
      39 => 112,
      40 => 114,
      41 => 111,
      42 => 99,
      43 => 101,
      44 => 115,
      45 => 115,
      46 => 32,
      47 => 111,
      48 => 102,
      49 => 32,
      50 => 99,
      51 => 114,
      52 => 101,
      53 => 97,
      54 => 116,
      55 => 105,
      56 => 110,
      57 => 103,
      58 => 32,
      59 => 97,
      60 => 32,
      61 => 110,
      62 => 101,
      63 => 119,
      64 => 32,
      65 => 112,
      66 => 108,
      67 => 97,
      68 => 116,
      69 => 102,
      70 => 111,
      71 => 114,
      72 => 109,
      73 => 32,
      74 => 111,
      75 => 110,
      76 => 32,
      77 => 119,
      78 => 104,
      79 => 105,
      80 => 99,
      81 => 104,
      82 => 32,
      83 => 116,
      84 => 111,
      85 => 32,
      86 => 112,
      87 => 101,
      88 => 114,
      89 => 102,
      90 => 111,
      91 => 114,
      92 => 109,
      93 => 32,
      94 => 99,
      95 => 111,
      96 => 109,
      97 => 109,
      98 => 111,
      99 => 110,
      100 => 32,
      101 => 99,
      102 => 111,
      103 => 110,
      104 => 115,
      105 => 111,
      106 => 108,
      107 => 101,
      108 => 32,
      109 => 99,
      110 => 111,
      111 => 109,
      112 => 109,
      113 => 97,
      114 => 110,
      115 => 100,
      116 => 115,
      117 => 46,
      118 => 10,
      119 => 80,
      120 => 108,
      121 => 97,
      122 => 116,
      123 => 102,
      124 => 111,
      125 => 114,
      126 => 109,
      127 => 32,
      128 => 84,
      129 => 121,
      130 => 112,
      131 => 101,
      132 => 58,
      133 => 32,
      134 => 10,
      135 => 32,
      136 => 32,
      137 => 91,
      138 => 48,
      139 => 93,
      140 => 32,
      141 => 102,
      142 => 111,
      143 => 111,
      144 => 95,
      145 => 112,
      146 => 108,
      147 => 97,
      148 => 116,
      149 => 102,
      150 => 111,
      151 => 114,
      152 => 109,
      153 => 10,
      154 => 32,
      155 => 62,
      156 => 32,
      157 => 102,
      158 => 27,
      159 => 91,
      160 => 75,
      161 => 27,
      162 => 55,
      163 => 111,
      164 => 111,
      165 => 95,
      166 => 112,
      167 => 108,
      168 => 97,
      169 => 116,
      170 => 102,
      171 => 111,
      172 => 114,
      173 => 109,
      174 => 27,
      175 => 56,
      176 => 111,
      177 => 27,
      178 => 91,
      179 => 75,
      180 => 27,
      181 => 55,
      182 => 111,
      183 => 95,
      184 => 112,
      185 => 108,
      186 => 97,
      187 => 116,
      188 => 102,
      189 => 111,
      190 => 114,
      191 => 109,
      192 => 27,
      193 => 56,
      194 => 111,
      195 => 27,
      196 => 91,
      197 => 75,
      198 => 27,
      199 => 55,
      200 => 95,
      201 => 112,
      202 => 108,
      203 => 97,
      204 => 116,
      205 => 102,
      206 => 111,
      207 => 114,
      208 => 109,
      209 => 27,
      210 => 56,
      211 => 95,
      212 => 27,
      213 => 91,
      214 => 75,
      215 => 27,
      216 => 55,
      217 => 112,
      218 => 108,
      219 => 97,
      220 => 116,
      221 => 102,
      222 => 111,
      223 => 114,
      224 => 109,
      225 => 27,
      226 => 56,
      227 => 112,
      228 => 27,
      229 => 91,
      230 => 75,
      231 => 27,
      232 => 55,
      233 => 108,
      234 => 97,
      235 => 116,
      236 => 102,
      237 => 111,
      238 => 114,
      239 => 109,
      240 => 27,
      241 => 56,
      242 => 108,
      243 => 27,
      244 => 91,
      245 => 75,
      246 => 27,
      247 => 55,
      248 => 97,
      249 => 116,
      250 => 102,
      251 => 111,
      252 => 114,
      253 => 109,
      254 => 27,
      255 => 56,
      256 => 97,
      257 => 27,
      258 => 91,
      259 => 75,
      260 => 27,
      261 => 55,
      262 => 116,
      263 => 102,
      264 => 111,
      265 => 114,
      266 => 109,
      267 => 27,
      268 => 56,
      269 => 116,
      270 => 27,
      271 => 91,
      272 => 75,
      273 => 27,
      274 => 55,
      275 => 102,
      276 => 111,
      277 => 114,
      278 => 109,
      279 => 27,
      280 => 56,
      281 => 102,
      282 => 27,
      283 => 91,
      284 => 75,
      285 => 27,
      286 => 55,
      287 => 111,
      288 => 114,
      289 => 109,
      290 => 27,
      291 => 56,
      292 => 111,
      293 => 27,
      294 => 91,
      295 => 75,
      296 => 27,
      297 => 55,
      298 => 114,
      299 => 109,
      300 => 27,
      301 => 56,
      302 => 114,
      303 => 27,
      304 => 91,
      305 => 75,
      306 => 27,
      307 => 55,
      308 => 109,
      309 => 27,
      310 => 56,
      311 => 109,
      312 => 27,
      313 => 91,
      314 => 75,
      315 => 27,
      316 => 55,
      317 => 27,
      318 => 56,
      319 => 10,
      320 => 78,
      321 => 97,
      322 => 109,
      323 => 101,
      324 => 58,
      325 => 32,
      326 => 65,
      327 => 108,
      328 => 105,
      329 => 97,
      330 => 115,
      331 => 58,
      332 => 32,
      333 => 43,
      334 => 45,
      335 => 45,
      336 => 45,
      337 => 45,
      338 => 45,
      339 => 45,
      340 => 45,
      341 => 45,
      342 => 45,
      343 => 45,
      344 => 45,
      345 => 45,
      346 => 45,
      347 => 45,
      348 => 45,
      349 => 45,
      350 => 43,
      351 => 45,
      352 => 45,
      353 => 45,
      354 => 45,
      355 => 45,
      356 => 45,
      357 => 45,
      358 => 45,
      359 => 45,
      360 => 45,
      361 => 45,
      362 => 45,
      363 => 45,
      364 => 45,
      365 => 43,
      366 => 10,
      367 => 124,
      368 => 32,
      369 => 80,
      370 => 114,
      371 => 111,
      372 => 112,
      373 => 101,
      374 => 114,
      375 => 116,
      376 => 121,
      377 => 32,
      378 => 32,
      379 => 32,
      380 => 32,
      381 => 32,
      382 => 32,
      383 => 32,
      384 => 124,
      385 => 32,
      386 => 86,
      387 => 97,
      388 => 108,
      389 => 117,
      390 => 101,
      391 => 32,
      392 => 32,
      393 => 32,
      394 => 32,
      395 => 32,
      396 => 32,
      397 => 32,
      398 => 32,
      399 => 124,
      400 => 10,
      401 => 43,
      402 => 45,
      403 => 45,
      404 => 45,
      405 => 45,
      406 => 45,
      407 => 45,
      408 => 45,
      409 => 45,
      410 => 45,
      411 => 45,
      412 => 45,
      413 => 45,
      414 => 45,
      415 => 45,
      416 => 45,
      417 => 45,
      418 => 43,
      419 => 45,
      420 => 45,
      421 => 45,
      422 => 45,
      423 => 45,
      424 => 45,
      425 => 45,
      426 => 45,
      427 => 45,
      428 => 45,
      429 => 45,
      430 => 45,
      431 => 45,
      432 => 45,
      433 => 43,
      434 => 10,
      435 => 124,
      436 => 32,
      437 => 112,
      438 => 108,
      439 => 97,
      440 => 116,
      441 => 102,
      442 => 111,
      443 => 114,
      444 => 109,
      445 => 46,
      446 => 116,
      447 => 121,
      448 => 112,
      449 => 101,
      450 => 32,
      451 => 32,
      452 => 124,
      453 => 32,
      454 => 102,
      455 => 111,
      456 => 111,
      457 => 95,
      458 => 112,
      459 => 108,
      460 => 97,
      461 => 116,
      462 => 102,
      463 => 111,
      464 => 114,
      465 => 109,
      466 => 32,
      467 => 124,
      468 => 10,
      469 => 124,
      470 => 32,
      471 => 112,
      472 => 108,
      473 => 97,
      474 => 116,
      475 => 102,
      476 => 111,
      477 => 114,
      478 => 109,
      479 => 46,
      480 => 110,
      481 => 97,
      482 => 109,
      483 => 101,
      484 => 32,
      485 => 32,
      486 => 124,
      487 => 32,
      488 => 70,
      489 => 111,
      490 => 111,
      491 => 32,
      492 => 84,
      493 => 101,
      494 => 115,
      495 => 116,
      496 => 32,
      497 => 32,
      498 => 32,
      499 => 32,
      500 => 32,
      501 => 124,
      502 => 10,
      503 => 124,
      504 => 32,
      505 => 112,
      506 => 108,
      507 => 97,
      508 => 116,
      509 => 102,
      510 => 111,
      511 => 114,
      512 => 109,
      513 => 46,
      514 => 97,
      515 => 108,
      516 => 105,
      517 => 97,
      518 => 115,
      519 => 32,
      520 => 124,
      521 => 32,
      522 => 102,
      523 => 111,
      524 => 111,
      525 => 116,
      526 => 101,
      527 => 115,
      528 => 116,
      529 => 32,
      530 => 32,
      531 => 32,
      532 => 32,
      533 => 32,
      534 => 32,
      535 => 124,
      536 => 10,
      537 => 43,
      538 => 45,
      539 => 45,
      540 => 45,
      541 => 45,
      542 => 45,
      543 => 45,
      544 => 45,
      545 => 45,
      546 => 45,
      547 => 45,
      548 => 45,
      549 => 45,
      550 => 45,
      551 => 45,
      552 => 45,
      553 => 45,
      554 => 43,
      555 => 45,
      556 => 45,
      557 => 45,
      558 => 45,
      559 => 45,
      560 => 45,
      561 => 45,
      562 => 45,
      563 => 45,
      564 => 45,
      565 => 45,
      566 => 45,
      567 => 45,
      568 => 45,
      569 => 43,
      570 => 10,
      571 => 65,
      572 => 114,
      573 => 101,
      574 => 32,
      575 => 116,
      576 => 104,
      577 => 101,
      578 => 115,
      579 => 101,
      580 => 32,
      581 => 99,
      582 => 111,
      583 => 110,
      584 => 102,
      585 => 105,
      586 => 103,
      587 => 32,
      588 => 99,
      589 => 111,
      590 => 114,
      591 => 114,
      592 => 101,
      593 => 99,
      594 => 116,
      595 => 63,
      596 => 32,
      597 => 83,
      598 => 117,
      599 => 99,
      600 => 99,
      601 => 101,
      602 => 115,
      603 => 115,
      604 => 102,
      605 => 117,
      606 => 108,
      607 => 108,
      608 => 121,
      609 => 32,
      610 => 115,
      611 => 97,
      612 => 118,
      613 => 101,
      614 => 100,
      615 => 46,
      616 => 10,
    );
  }

}